#! /usr/bin/env ruby
# coding: utf-8

begin
  require 'osx/cocoa'
  OSX.require_framework 'Quartz'
rescue LoadError
  abort "RubyCocoa is needed"
end

if ARGV.length < 2
  abort "#{$0} INPUT.pdf OUTPUT.pdf"
end

src_path  = ARGV.shift
dest_path = ARGV.shift

unless File.file? src_path
  if File.exists? src_path
    abort "can't open the file: #{src_path}"
  else
    abort "file not found: #{src_path}"
  end
end

if File.exist? dest_path
  abort "the file already exists: #{dest_path}"
end

src_url = OSX.CFURLCreateFromFileSystemRepresentation(OSX::KCFAllocatorDefault, src_path, src_path.bytesize, false)
dest_url = OSX.CFURLCreateFromFileSystemRepresentation(OSX::KCFAllocatorDefault, dest_path, dest_path.bytesize, false)
unless src_pdf = OSX.CGPDFDocumentCreateWithURL(src_url)
  abort "not a PDF file: #{src_path}"
end

if OSX.CGPDFDocumentIsEncrypted(src_pdf)
  abort "the src PDF file is encrypted: #{src_path}\n" <<
    "Sorry, encrypted PDF has not been supported yet"
end

unless OSX.CGPDFDocumentIsUnlocked(src_pdf)
  abort "Can't unlock the PDF file: #{src_path}"
end

src_pages = OSX.CGPDFDocumentGetNumberOfPages(src_pdf)
if src_pages == 0
  abort "the PDF file doesn't have any pages: #{src_path}"
end

info_dict = OSX.CFDictionaryCreateMutable(
  nil, 0,
  OSX::KCFTypeDictionaryKeyCallBacks,
  OSX::KCFTypeDictionaryValueCallBacks)
#OSX.CFDictionarySetValue(info_dict, OSX::KCGPDFContextTitle,   "title"); # FIXME
#OSX.CFDictionarySetValue(info_dict, OSX::KCGPDFContextCreator, "creator"); # FIXME
dest_pdf = OSX.CGPDFContextCreateWithURL(dest_url, nil, info_dict)

src_pages.times do |page_number|
  page = OSX.CGPDFDocumentGetPage(src_pdf, page_number + 1)
  page_rect = OSX.CGPDFPageGetBoxRect(page, OSX::KCGPDFMediaBox)

  src_width = page_rect.size.width
  src_height = page_rect.size.height
  if src_width < src_height
    rotate = true
    dest_width = src_height / 2.0
    dest_height = src_width
  else
    rotate = false
    dest_width = src_width / 2.0
    dest_height = src_height
  end

  page_rect.size.width = dest_width
  page_rect.size.height = dest_height

  # draw half-left of the page
  OSX.CGContextBeginPage(dest_pdf, page_rect)
  OSX.CGContextSaveGState(dest_pdf)
  if rotate
    OSX.CGContextTranslateCTM(dest_pdf, 0, dest_height)
    OSX.CGContextRotateCTM(dest_pdf, -Math::PI/2.0)
  end
  OSX.CGContextDrawPDFPage(dest_pdf, page)
  OSX.CGContextEndPage(dest_pdf)

  # draw half-right of the page
  OSX.CGContextBeginPage(dest_pdf, page_rect)
  OSX.CGContextSaveGState(dest_pdf)
  OSX.CGContextTranslateCTM(dest_pdf, -dest_width, 0)
  if rotate
    OSX.CGContextTranslateCTM(dest_pdf, 0, dest_height)
    OSX.CGContextRotateCTM(dest_pdf, -Math::PI/2.0)
  end
  OSX.CGContextDrawPDFPage(dest_pdf, page)
  OSX.CGContextRestoreGState(dest_pdf)
  OSX.CGContextEndPage(dest_pdf)
end

# vim:set fileencoding=utf-8 tabstop=8 shiftwidth=2 expandtab :
